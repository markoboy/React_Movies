import path from 'path';
import fs from 'fs/promises';

import React from 'react';
import ReactDOMServer from 'react-dom/server';
import { StaticRouter } from 'react-router';
import { Provider } from 'react-redux';
import { ChunkExtractor } from '@loadable/server';
import serialize from 'serialize-javascript';

import App from '@components/App';
import configureStore from '@store/index';
import { fetchMovies } from '@store/thunks/moviesThunk';

// Remove the starting / if the public_url is not an http as the basename is prepended on every link on SSR
const basename = process.env.PUBLIC_URL.replace(/^\//, '');

const SEARCH_QUERY_REGEX = /^\/search\/(.+)/i;

export default async function serverRenderer({ rootId = 'root', url } = {}) {
  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.resolve(process.cwd(), 'build', 'loadable-stats.json');

  // We create an extractor from the statsFile
  const extractor = new ChunkExtractor({ statsFile, entrypoints: ['bundle'] });

  // Configure the application store and fetch movies based on the search query
  const store = configureStore();

  const [, search] = url.match(SEARCH_QUERY_REGEX) || [];

  await fetchMovies({ search: search || '' })(store.dispatch, store.getState);

  // Wrap application using "collectChunks"
  const jsx = extractor.collectChunks(
    <Provider store={store}>
      <StaticRouter basename={basename} location={url}>
        <App />
      </StaticRouter>
    </Provider>
  );

  const appHtml = ReactDOMServer.renderToString(jsx);

  const preloadedState = store.getState();

  const scriptTags = extractor.getScriptTags();
  const linkTags = extractor.getLinkTags();
  const styleTags = extractor.getStyleTags();

  const indexFile = path.resolve(process.cwd(), 'public', 'index.html');

  let indexHtml = await fs.readFile(indexFile, 'utf8');

  // A regex to group the container that the app renders with the specified id
  const divContainerRegex = new RegExp(`(<div[^>]+id="${rootId}"[^>]+>)`, 'i');

  // Append appHtml after the div with id of root
  indexHtml = indexHtml.replace(divContainerRegex, `$1${appHtml}`);

  // Append style tags and link tags to prefetch/preload assets before closing head tag
  indexHtml = indexHtml.replace(/(<\/head>)/, `${styleTags}${linkTags}$1`);

  // Append the __SSR_STATE__ to the window object with a script before the body closing tag
  indexHtml = indexHtml.replace(
    /(<\/body>)/,
    `<script>window.__SSR_STATE__ = ${serialize(preloadedState, {
      isJSON: true,
    })};</script>${scriptTags}$1`
  );

  return indexHtml;
}
